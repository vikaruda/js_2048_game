{"version":3,"sources":["modules/Game.class.js","scripts/main.js"],"names":["Game","initialState","score","moved","row","numbers","filter","num","i","length","newRow","concat","Array","fill","some","index","push","addRandomOneNumber","addScore","every","val","column","map","col","newColumn","points","isWin","includes","getWinDiv","document","querySelector","classList","remove","textContent","body","append","isLose","checkLose","loseDiv","add","resetArrayToZero","state","addRandomNumber","cell","j","canMerge","emptyCells","forEach","rowIndex","colIndex","randomIndex","Math","floor","random","splice","arr","module","exports","require","game","getButtonStart","getCell","querySelectorAll","scoreElement","addLose","divContainer","click","renderField","cellIndex","cellElement","addEventListener","event","target","tagName","start","contains","restart","e","key","moveRight","moveLeft","moveUp","moveDown","getScore","getStatus"],"mappings":"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","file":"main.15669786.js","sourceRoot":"..\\src","sourcesContent":["/* eslint-disable function-paren-newline */\n/* eslint-disable prefer-const */\n'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n  initialState = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n   */\n  // TODO: Замінити по індексу числа\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.score = 0;\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (const row of this.initialState) {\n      let numbers = row.filter((num) => num !== 0);\n\n      for (let i = 0; i < numbers.length - 1; i++) {\n        if (numbers[i] === numbers[i + 1]) {\n          if (numbers[i] < 256) {\n            numbers[i] *= 2;\n          } else {\n            numbers[i] += numbers[i];\n          }\n          numbers[i + 1] = 0;\n          moved = true;\n        }\n      }\n\n      numbers = numbers.filter((num) => num !== 0);\n\n      const newRow = numbers.concat(Array(row.length - numbers.length).fill(0));\n\n      // Повертаємо новий рядок в initialState\n      if (newRow.some((num, index) => num !== row[index])) {\n        moved = true;\n      }\n\n      row.length = 0;\n      row.push(...newRow);\n    }\n\n    if (moved) {\n      this.addRandomOneNumber();\n      this.addScore(10);\n    }\n  }\n\n  moveRight() {\n    let moved = false;\n\n    for (const row of this.initialState) {\n      let numbers = row.filter((num) => num !== 0);\n\n      for (let i = numbers.length - 1; i > 0; i--) {\n        if (numbers[i] === numbers[i - 1]) {\n          if (numbers[i] < 256) {\n            numbers[i] *= 2;\n          } else {\n            numbers[i] += numbers[i];\n          }\n          numbers[i - 1] = 0;\n          moved = true;\n        }\n      }\n\n      numbers = numbers.filter((num) => num !== 0);\n\n      const newRow = Array(row.length - numbers.length)\n        .fill(0)\n        .concat(numbers);\n\n      if (!row.every((val, index) => val === newRow[index])) {\n        moved = true;\n      }\n\n      row.length = 0;\n      row.push(...newRow);\n    }\n\n    if (moved) {\n      this.addRandomOneNumber();\n      this.addScore(10);\n    }\n  }\n\n  moveUp() {\n    let moved = false;\n\n    for (let col = 0; col < this.initialState[0].length; col++) {\n      let column = this.initialState\n        .map((row) => row[col])\n        .filter((num) => num !== 0);\n\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          if (column[i] < 256) {\n            column[i] *= 2;\n          } else {\n            column[i] += column[i];\n          }\n          column[i + 1] = 0;\n          moved = true;\n          // console.log(moved);\n        }\n      }\n\n      column = column.filter((num) => num !== 0);\n\n      const newColumn = column.concat(\n        Array(this.initialState.length - column.length).fill(0),\n      );\n\n      for (let row = 0; row < this.initialState.length; row++) {\n        if (this.initialState[row][col] !== newColumn[row]) {\n          moved = true; // Якщо змінився стан колонки\n        }\n        this.initialState[row][col] = newColumn[row];\n      }\n    }\n\n    if (moved) {\n      this.addRandomOneNumber();\n      this.addScore(10);\n    }\n  }\n\n  moveDown() {\n    let moved = false;\n\n    for (let col = 0; col < this.initialState[0].length; col++) {\n      let column = this.initialState\n        .map((row) => row[col])\n        .filter((num) => num !== 0);\n\n      for (let i = column.length - 1; i > 0; i--) {\n        if (column[i] === column[i - 1]) {\n          if (column[i] < 256) {\n            column[i] *= 2;\n          } else {\n            column[i] += column[i];\n          }\n          column[i - 1] = 0;\n          moved = true;\n        }\n      }\n\n      column = column.filter((num) => num !== 0);\n\n      const newColumn = Array(this.initialState.length - column.length)\n        .fill(0)\n        .concat(column);\n\n      for (let row = 0; row < this.initialState.length; row++) {\n        this.initialState[row][col] = newColumn[row];\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomOneNumber();\n      this.addScore(10);\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  addScore(points) {\n    this.score += points;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.initialState;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    const isWin = this.initialState.some((row) => row.includes(2048));\n\n    if (isWin) {\n      const getWinDiv = document.querySelector('.message.message-win.hidden');\n\n      if (getWinDiv) {\n        getWinDiv.classList.remove('hidden');\n        getWinDiv.textContent = 'You winner';\n        document.body.append(getWinDiv);\n      }\n    }\n\n    const isLose = this.checkLose();\n\n    const loseDiv = document.querySelector('.message.message-lose.hidden');\n\n    if (isLose === 'Lose') {\n      if (loseDiv) {\n        loseDiv.classList.remove('hidden'); // Робимо видимим\n        loseDiv.textContent = 'You lose';\n      }\n    } else if (loseDiv) {\n      loseDiv.classList.add('hidden'); // Ховаємо, якщо програшу немає\n    }\n  }\n\n  restart() {\n    this.resetArrayToZero(this.initialState);\n\n    this.state = [...this.initialState];\n\n    this.addRandomNumber();\n\n    this.score = 0;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.state = [...this.initialState];\n    this.addRandomNumber();\n  }\n\n  checkLose() {\n    const isFull = this.initialState.every((row) =>\n      // eslint-disable-next-line prettier/prettier\n      row.every((cell) => cell !== 0),\n    );\n\n    if (!isFull) {\n      return 'Continue';\n    }\n\n    const hasMove = this.initialState.some((row, i) =>\n      row.some((cell, j) => this.canMerge(i, j)),\n    );\n\n    return hasMove ? 'Continue' : 'Lose';\n  }\n\n  canMerge(row, col) {\n    const cell = this.initialState[row][col];\n\n    return (\n      (row > 0 && this.initialState[row - 1][col] === cell) ||\n      (row < this.initialState.length - 1 &&\n        this.initialState[row + 1][col] === cell) ||\n      (col > 0 && this.initialState[row][col - 1] === cell) ||\n      (col < this.initialState[row].length - 1 &&\n        this.initialState[row][col + 1] === cell)\n    );\n  }\n\n  addRandomNumber() {\n    let emptyCells = [];\n\n    this.state.forEach((row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          emptyCells.push({ rowIndex, colIndex });\n        }\n      });\n    });\n\n    for (let i = 0; i < 2; i++) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { rowIndex, colIndex } = emptyCells[randomIndex];\n\n      this.state[rowIndex][colIndex] = 2;\n      emptyCells.splice(randomIndex, 1);\n    }\n  }\n\n  addRandomOneNumber() {\n    let emptyCells = [];\n\n    this.state.forEach((row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          emptyCells.push({ rowIndex, colIndex });\n        }\n      });\n    });\n\n    for (let i = 0; i < 1; i++) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { rowIndex, colIndex } = emptyCells[randomIndex];\n\n      this.state[rowIndex][colIndex] = 2;\n      emptyCells.splice(randomIndex, 1);\n    }\n  }\n\n  resetArrayToZero(arr) {\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr[i].length; j++) {\n        arr[i][j] = 0;\n      }\n    }\n  }\n  /**\n   * Resets the game.\n   */\n\n  // Add your own methods here\n}\n\nmodule.exports = Game;\n","'use strict';\n\nconst Game = require('../modules/Game.class');\n// eslint-disable-next-line no-unused-vars\nconst game = new Game();\n\nconst getButtonStart = document.querySelector('button');\nconst getCell = document.querySelectorAll('.field-cell');\nconst scoreElement = document.querySelector('.game-score');\nconst addLose = document.querySelector('.message.message-lose');\nconst divContainer = document.querySelector('.message-container');\n\nlet click = 0;\n\n// eslint-disable-next-line no-shadow\ngetButtonStart.addEventListener('click', function (event) {\n  if (event.target.tagName === 'BUTTON') {\n    click++;\n\n    getButtonStart.classList.add('start');\n\n    if (click === 1) {\n      game.start();\n      renderField(game.state);\n\n      const startM = document.querySelector('.message.message-start');\n\n      startM.classList.add('hidden');\n    }\n\n    if (click > 1) {\n      if (!divContainer.contains(addLose)) {\n        divContainer.append(addLose);\n      } else {\n        addLose.classList.add('hidden');\n      }\n\n      game.restart();\n      renderField(game.state);\n      scoreElement.textContent = 0;\n    }\n  }\n});\n\nfunction renderField(state) {\n  getCell.forEach((cell) => {\n    cell.textContent = '';\n\n    cell.classList.remove(\n      'field-cell--2',\n      'field-cell--4',\n      'field-cell--8',\n      'field-cell--16',\n      'field-cell--32',\n      'field-cell--64',\n      'field-cell--128',\n      'field-cell--256',\n      'field-cell--512',\n      'field-cell--1024',\n      'field-cell--2048',\n    );\n  });\n\n  state.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      const cellElement = getCell[rowIndex * 4 + cellIndex];\n\n      if (cell !== 0) {\n        cellElement.textContent = cell;\n        cellElement.classList.add(`field-cell--${cell}`);\n      }\n    });\n  });\n}\n\ndocument.addEventListener('keydown', function (e) {\n  if (e) {\n    if (\n      e.key === 'ArrowRight' ||\n      e.key === 'ArrowLeft' ||\n      e.key === 'ArrowUp' ||\n      e.key === 'ArrowDown'\n    ) {\n      getButtonStart.classList.remove('start');\n      getButtonStart.classList.add('restart');\n      getButtonStart.textContent = 'Restart';\n    }\n\n    switch (e.key) {\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      default:\n        return;\n    }\n\n    renderField(game.state);\n    scoreElement.textContent = game.getScore();\n    game.getStatus();\n  }\n});\n"]}